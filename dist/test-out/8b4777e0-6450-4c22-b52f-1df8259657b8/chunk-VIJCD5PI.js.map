{
  "version": 3,
  "sources": ["../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/events/event_manager.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/shared_styles_host.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/dom_renderer.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/browser_adapter.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/testability.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/xhr.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/events/dom_events.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/events/key_events.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  ɵRuntimeError as RuntimeError,\n  type ListenerOptions,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS = new InjectionToken<EventManagerPlugin[]>(\n  ngDevMode ? 'EventManagerPlugins' : '',\n);\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(\n    @Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[],\n    private _zone: NgZone,\n  ) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @param options Options that configure how the event listener is bound.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler, options);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n        RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `No event manager plugin found for event ${eventName}`,\n      );\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nexport abstract class EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  /**\n   * Should return `true` for every event name that should be supported by this plugin\n   */\n  abstract supports(eventName: string): boolean;\n\n  /**\n   * Implement the behaviour for the supported events\n   */\n  abstract addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  APP_ID,\n  CSP_NONCE,\n  Inject,\n  Injectable,\n  OnDestroy,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n/**\n * A record of usage for a specific style including all elements added to the DOM\n * that contain a given style.\n */\ninterface UsageRecord<T> {\n  elements: T[];\n  usage: number;\n}\n\n/**\n * Removes all provided elements from the document.\n * @param elements An array of HTML Elements.\n */\nfunction removeElements(elements: Iterable<HTMLElement>): void {\n  for (const element of elements) {\n    element.remove();\n  }\n}\n\n/**\n * Creates a `style` element with the provided inline style content.\n * @param style A string of the inline style content.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLStyleElement instance.\n */\nfunction createStyleElement(style: string, doc: Document): HTMLStyleElement {\n  const styleElement = doc.createElement('style');\n  styleElement.textContent = style;\n\n  return styleElement;\n}\n\n/**\n * Searches a DOM document's head element for style elements with a matching application\n * identifier attribute (`ng-app-id`) to the provide identifier and adds usage records for each.\n * @param doc An HTML DOM document instance.\n * @param appId A string containing an Angular application identifer.\n * @param inline A Map object for tracking inline (defined via `styles` in component decorator) style usage.\n * @param external A Map object for tracking external (defined via `styleUrls` in component decorator) style usage.\n */\nfunction addServerStyles(\n  doc: Document,\n  appId: string,\n  inline: Map<string, UsageRecord<HTMLStyleElement>>,\n  external: Map<string, UsageRecord<HTMLLinkElement>>,\n): void {\n  const elements = doc.head?.querySelectorAll<HTMLStyleElement | HTMLLinkElement>(\n    `style[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"],link[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"]`,\n  );\n\n  if (elements) {\n    for (const styleElement of elements) {\n      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n      if (styleElement instanceof HTMLLinkElement) {\n        // Only use filename from href\n        // The href is build time generated with a unique value to prevent duplicates.\n        external.set(styleElement.href.slice(styleElement.href.lastIndexOf('/') + 1), {\n          usage: 0,\n          elements: [styleElement],\n        });\n      } else if (styleElement.textContent) {\n        inline.set(styleElement.textContent, {usage: 0, elements: [styleElement]});\n      }\n    }\n  }\n}\n\n/**\n * Creates a `link` element for the provided external style URL.\n * @param url A string of the URL for the stylesheet.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLLinkElement instance.\n */\nexport function createLinkElement(url: string, doc: Document): HTMLLinkElement {\n  const linkElement = doc.createElement('link');\n  linkElement.setAttribute('rel', 'stylesheet');\n  linkElement.setAttribute('href', url);\n\n  return linkElement;\n}\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  /**\n   * Provides usage information for active inline style content and associated HTML <style> elements.\n   * Embedded styles typically originate from the `styles` metadata of a rendered component.\n   */\n  private readonly inline = new Map<string /** content */, UsageRecord<HTMLStyleElement>>();\n\n  /**\n   * Provides usage information for active external style URLs and the associated HTML <link> elements.\n   * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.\n   */\n  private readonly external = new Map<string /** URL */, UsageRecord<HTMLLinkElement>>();\n\n  /**\n   * Set of host DOM nodes that will have styles attached.\n   */\n  private readonly hosts = new Set<Node>();\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: Document,\n    @Inject(APP_ID) private readonly appId: string,\n    @Inject(CSP_NONCE) @Optional() private readonly nonce?: string | null,\n    // Cannot remove it due to backward compatibility\n    // (it seems some TGP targets might be calling this constructor directly).\n    @Inject(PLATFORM_ID) platformId: object = {},\n  ) {\n    addServerStyles(doc, appId, this.inline, this.external);\n    this.hosts.add(doc.head);\n  }\n\n  /**\n   * Adds embedded styles to the DOM via HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  addStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.addUsage(value, this.inline, createStyleElement);\n    }\n\n    urls?.forEach((value) => this.addUsage(value, this.external, createLinkElement));\n  }\n\n  /**\n   * Removes embedded styles from the DOM that were added as HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  removeStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.removeUsage(value, this.inline);\n    }\n\n    urls?.forEach((value) => this.removeUsage(value, this.external));\n  }\n\n  protected addUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n    creator: (value: string, doc: Document) => T,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If existing, just increment the usage count\n    if (record) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && record.usage === 0) {\n        // A usage count of zero indicates a preexisting server generated style.\n        // This attribute is solely used for debugging purposes of SSR style reuse.\n        record.elements.forEach((element) => element.setAttribute('ng-style-reused', ''));\n      }\n      record.usage++;\n    } else {\n      // Otherwise, create an entry to track the elements and add element for each host\n      usages.set(value, {\n        usage: 1,\n        elements: [...this.hosts].map((host) => this.addElement(host, creator(value, this.doc))),\n      });\n    }\n  }\n\n  protected removeUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If there is a record, reduce the usage count and if no longer used,\n    // remove from DOM and delete usage record.\n    if (record) {\n      record.usage--;\n      if (record.usage <= 0) {\n        removeElements(record.elements);\n        usages.delete(value);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    for (const [, {elements}] of [...this.inline, ...this.external]) {\n      removeElements(elements);\n    }\n    this.hosts.clear();\n  }\n\n  /**\n   * Adds a host node to the set of style hosts and adds all existing style usage to\n   * the newly added host node.\n   *\n   * This is currently only used for Shadow DOM encapsulation mode.\n   */\n  addHost(hostNode: Node): void {\n    this.hosts.add(hostNode);\n\n    // Add existing styles to new host\n    for (const [style, {elements}] of this.inline) {\n      elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));\n    }\n    for (const [url, {elements}] of this.external) {\n      elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hosts.delete(hostNode);\n  }\n\n  private addElement<T extends HTMLElement>(host: Node, element: T): T {\n    // Add a nonce if present\n    if (this.nonce) {\n      element.setAttribute('nonce', this.nonce);\n    }\n\n    // Add application identifier when on the server to support client-side reuse\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      element.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n    }\n\n    // Insert the element into the DOM with the host node as parent\n    return host.appendChild(element);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {\n  APP_ID,\n  CSP_NONCE,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  RendererStyleFlags2,\n  RendererType2,\n  ViewEncapsulation,\n  ɵRuntimeError as RuntimeError,\n  type ListenerOptions,\n  ɵTracingService as TracingService,\n  ɵTracingSnapshot as TracingSnapshot,\n  Optional,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {EventManager} from './events/event_manager';\nimport {createLinkElement, SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/Math/MathML',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nconst SOURCEMAP_URL_REGEXP = /\\/\\*#\\s*sourceMappingURL=(.+?)\\s*\\*\\//;\nconst PROTOCOL_REGEXP = /^https?:/;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n\n/**\n * A DI token that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken<boolean>(\n  ngDevMode ? 'RemoveStylesOnCompDestroy' : '',\n  {\n    providedIn: 'root',\n    factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n  },\n);\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map((s) => s.replace(COMPONENT_REGEX, compId));\n}\n\n/**\n * Prepends a baseHref to the `sourceMappingURL` within the provided CSS content.\n * If the `sourceMappingURL` contains an inline (encoded) map, the function skips processing.\n *\n * @note For inline stylesheets, the `sourceMappingURL` is relative to the page's origin\n * and not the provided baseHref. This function is needed as when accessing the page with a URL\n * containing two or more segments.\n * For example, if the baseHref is set to `/`, and you visit a URL like `http://localhost/foo/bar`,\n * the map would be requested from `http://localhost/foo/bar/comp.css.map` instead of what you'd expect,\n * which is `http://localhost/comp.css.map`. This behavior is corrected by modifying the `sourceMappingURL`\n * to ensure external source maps are loaded relative to the baseHref.\n *\n\n * @param baseHref - The base URL to prepend to the `sourceMappingURL`.\n * @param styles - An array of CSS content strings, each potentially containing a `sourceMappingURL`.\n * @returns The updated array of CSS content strings with modified `sourceMappingURL` values,\n * or the original content if no modification is needed.\n */\nexport function addBaseHrefToCssSourceMap(baseHref: string, styles: string[]): string[] {\n  if (!baseHref) {\n    return styles;\n  }\n\n  const absoluteBaseHrefUrl = new URL(baseHref, 'http://localhost');\n\n  return styles.map((cssContent) => {\n    if (!cssContent.includes('sourceMappingURL=')) {\n      return cssContent;\n    }\n\n    return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {\n      if (\n        sourceMapUrl[0] === '/' ||\n        sourceMapUrl.startsWith('data:') ||\n        PROTOCOL_REGEXP.test(sourceMapUrl)\n      ) {\n        return `/*# sourceMappingURL=${sourceMapUrl} */`;\n      }\n\n      const {pathname: resolvedSourceMapUrl} = new URL(sourceMapUrl, absoluteBaseHrefUrl);\n\n      return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;\n    });\n  });\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId = new Map<\n    string,\n    EmulatedEncapsulationDomRenderer2 | NoneEncapsulationDomRenderer\n  >();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n    private readonly eventManager: EventManager,\n    private readonly sharedStylesHost: SharedStylesHost,\n    @Inject(APP_ID) private readonly appId: string,\n    @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestroy: boolean,\n    @Inject(DOCUMENT) private readonly doc: Document,\n    @Inject(PLATFORM_ID) readonly platformId: Object,\n    readonly ngZone: NgZone,\n    @Inject(CSP_NONCE) private readonly nonce: string | null = null,\n    @Inject(TracingService)\n    @Optional()\n    private readonly tracingService: TracingService<TracingSnapshot> | null = null,\n  ) {\n    this.platformIsServer = typeof ngServerMode !== 'undefined' && ngServerMode;\n    this.defaultRenderer = new DefaultDomRenderer2(\n      eventManager,\n      doc,\n      ngZone,\n      this.platformIsServer,\n      this.tracingService,\n    );\n  }\n\n  createRenderer(element: any, type: RendererType2 | null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (\n      typeof ngServerMode !== 'undefined' &&\n      ngServerMode &&\n      type.encapsulation === ViewEncapsulation.ShadowDom\n    ) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n      const tracingService = this.tracingService;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n            eventManager,\n            sharedStylesHost,\n            type,\n            this.appId,\n            removeStylesOnCompDestroy,\n            doc,\n            ngZone,\n            platformIsServer,\n            tracingService,\n          );\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n            eventManager,\n            sharedStylesHost,\n            element,\n            type,\n            doc,\n            ngZone,\n            this.nonce,\n            platformIsServer,\n            tracingService,\n          );\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n            eventManager,\n            sharedStylesHost,\n            type,\n            removeStylesOnCompDestroy,\n            doc,\n            ngZone,\n            platformIsServer,\n            tracingService,\n          );\n          break;\n      }\n\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n\n  /**\n   * Used during HMR to clear any cached data about a component.\n   * @param componentId ID of the component that is being replaced.\n   */\n  protected componentReplaced(componentId: string) {\n    this.rendererByCompId.delete(componentId);\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  /**\n   * By default this renderer throws when encountering synthetic properties\n   * This can be disabled for example by the AsyncAnimationRendererFactory\n   */\n  throwOnSyntheticProps = true;\n\n  constructor(\n    private readonly eventManager: EventManager,\n    private readonly doc: Document,\n    private readonly ngZone: NgZone,\n    private readonly platformIsServer: boolean,\n    private readonly tracingService: TracingService<TracingSnapshot> | null,\n  ) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(_parent: any, oldChild: any): void {\n    oldChild.remove();\n  }\n\n  selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any {\n    let el: any =\n      typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n    if (!el) {\n      throw new RuntimeError(\n        RuntimeErrorCode.ROOT_NODE_NOT_FOUND,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `The selector \"${selectorOrNode}\" did not match any elements`,\n      );\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (el == null) {\n      return;\n    }\n\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this.throwOnSyntheticProps &&\n      checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(\n    target: 'window' | 'document' | 'body' | any,\n    event: string,\n    callback: (event: any) => boolean,\n    options?: ListenerOptions,\n  ): () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this.throwOnSyntheticProps &&\n      checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new RuntimeError(\n          RuntimeErrorCode.UNSUPPORTED_EVENT_TARGET,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `Unsupported event target ${target} for event ${event}`,\n        );\n      }\n    }\n\n    let wrappedCallback = this.decoratePreventDefault(callback);\n\n    if (this.tracingService?.wrapEventListener) {\n      wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);\n    }\n\n    return this.eventManager.addEventListener(\n      target,\n      event,\n      wrappedCallback,\n      options,\n    ) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior =\n        typeof ngServerMode !== 'undefined' && ngServerMode\n          ? this.ngZone.runGuarded(() => eventHandler(event))\n          : eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new RuntimeError(\n      RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY,\n      `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Make sure \\`provideAnimationsAsync()\\`, \\`provideAnimations()\\` or \\`provideNoopAnimations()\\` call was added to a list of providers used to bootstrap an application.\n  - There is a corresponding animation configuration named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.dev/api/core/Component#animations).`,\n    );\n  }\n}\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n    eventManager: EventManager,\n    private sharedStylesHost: SharedStylesHost,\n    private hostEl: any,\n    component: RendererType2,\n    doc: Document,\n    ngZone: NgZone,\n    nonce: string | null,\n    platformIsServer: boolean,\n    tracingService: TracingService<TracingSnapshot> | null,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer, tracingService);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    let styles = component.styles;\n    if (ngDevMode) {\n      // We only do this in development, as for production users should not add CSS sourcemaps to components.\n      const baseHref = getDOM().getBaseHref(doc) ?? '';\n      styles = addBaseHrefToCssSourceMap(baseHref, styles);\n    }\n\n    styles = shimStylesContent(component.id, styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n\n    // Apply any external component styles to the shadow root for the component's element.\n    // The ShadowDOM renderer uses an alternative execution path for component styles that\n    // does not use the SharedStylesHost that other encapsulation modes leverage. Much like\n    // the manual addition of embedded styles directly above, any external stylesheets\n    // must be manually added here to ensure ShadowDOM components are correctly styled.\n    // TODO: Consider reworking the DOM Renderers to consolidate style handling.\n    const styleUrls = component.getExternalStyles?.();\n    if (styleUrls) {\n      for (const styleUrl of styleUrls) {\n        const linkEl = createLinkElement(styleUrl, doc);\n        if (nonce) {\n          linkEl.setAttribute('nonce', nonce);\n        }\n        this.shadowRoot.appendChild(linkEl);\n      }\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(_parent: any, oldChild: any): void {\n    return super.removeChild(null, oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n  private readonly styleUrls?: string[];\n\n  constructor(\n    eventManager: EventManager,\n    private readonly sharedStylesHost: SharedStylesHost,\n    component: RendererType2,\n    private removeStylesOnCompDestroy: boolean,\n    doc: Document,\n    ngZone: NgZone,\n    platformIsServer: boolean,\n    tracingService: TracingService<TracingSnapshot> | null,\n    compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer, tracingService);\n    let styles = component.styles;\n    if (ngDevMode) {\n      // We only do this in development, as for production users should not add CSS sourcemaps to components.\n      const baseHref = getDOM().getBaseHref(doc) ?? '';\n      styles = addBaseHrefToCssSourceMap(baseHref, styles);\n    }\n\n    this.styles = compId ? shimStylesContent(compId, styles) : styles;\n    this.styleUrls = component.getExternalStyles?.(compId);\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles, this.styleUrls);\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n    eventManager: EventManager,\n    sharedStylesHost: SharedStylesHost,\n    component: RendererType2,\n    appId: string,\n    removeStylesOnCompDestroy: boolean,\n    doc: Document,\n    ngZone: NgZone,\n    platformIsServer: boolean,\n    tracingService: TracingService<TracingSnapshot> | null,\n  ) {\n    const compId = appId + '-' + component.id;\n    super(\n      eventManager,\n      sharedStylesHost,\n      component,\n      removeStylesOnCompDestroy,\n      doc,\n      ngZone,\n      platformIsServer,\n      tracingService,\n      compId,\n    );\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵparseCookieValue as parseCookieValue,\n  ɵsetRootDomAdapter as setRootDomAdapter,\n  ɵDomAdapter as DomAdapter,\n} from '@angular/common';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport class BrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any, options: any): Function {\n    el.addEventListener(evt, listener, options);\n    return () => {\n      el.removeEventListener(evt, listener, options);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    (node as Element | Text | Comment).remove();\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget | null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string | null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string | null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement | null = null;\nfunction getBaseElementHref(): string | null {\n  baseElement = baseElement || document.head.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\nfunction relativePath(url: string): string {\n  // The base URL doesn't really matter, we just need it so relative paths have something\n  // to resolve against. In the browser `HTMLBaseElement.href` is always absolute.\n  return new URL(url, document.baseURI).pathname;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {\n  GetTestability,\n  Testability,\n  TestabilityRegistry,\n  ɵglobal as global,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new RuntimeError(\n          RuntimeErrorCode.TESTABILITY_NOT_FOUND,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            'Could not find testability for element.',\n        );\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: () => void) => {\n      const testabilities = global['getAllAngularTestabilities']() as Testability[];\n      let count = testabilities.length;\n      const decrement = function () {\n        count--;\n        if (count == 0) {\n          callback();\n        }\n      };\n      testabilities.forEach((testability) => {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(\n    registry: TestabilityRegistry,\n    elem: any,\n    findInAncestors: boolean,\n  ): Testability | null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    element.addEventListener(eventName, handler as EventListener, options);\n    return () => this.removeEventListener(element, eventName, handler as EventListener, options);\n  }\n\n  removeEventListener(\n    target: any,\n    eventName: string,\n    callback: Function,\n    options?: ListenerOptions,\n  ): void {\n    return target.removeEventListener(eventName, callback as EventListener, options);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS',\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey,\n};\n\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler = KeyEventsPlugin.eventCallback(\n      parsedEvent['fullKey'],\n      handler,\n      this.manager.getZone(),\n    );\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler, options);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string; domEventName: string} | null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach((modifierName) => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string; domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space'; // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot'; // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach((modifierName) => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    return keyName === 'esc' ? 'escape' : keyName;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CommonModule,\n  DOCUMENT,\n  XhrFactory,\n  ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID,\n} from '@angular/common';\nimport {\n  ApplicationConfig as ApplicationConfigFromCore,\n  ApplicationModule,\n  ApplicationRef,\n  createPlatformFactory,\n  ErrorHandler,\n  InjectionToken,\n  NgModule,\n  NgZone,\n  PLATFORM_ID,\n  PLATFORM_INITIALIZER,\n  platformCore,\n  PlatformRef,\n  Provider,\n  RendererFactory2,\n  StaticProvider,\n  Testability,\n  TestabilityRegistry,\n  Type,\n  ɵINJECTOR_SCOPE as INJECTOR_SCOPE,\n  ɵinternalCreateApplication as internalCreateApplication,\n  ɵRuntimeError as RuntimeError,\n  ɵsetDocument,\n  ɵTESTABILITY as TESTABILITY,\n  ɵTESTABILITY_GETTER as TESTABILITY_GETTER,\n  inject,\n  ɵresolveComponentResources as resolveComponentResources,\n} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/components/importing).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n  rootComponent: Type<unknown>,\n  options?: ApplicationConfig,\n): Promise<ApplicationRef> {\n  const config = {rootComponent, ...createProvidersConfig(options)};\n\n  // Attempt to resolve component resources before bootstrapping in JIT mode,\n  // however don't interrupt the bootstrapping process.\n  if ((typeof ngJitMode === 'undefined' || ngJitMode) && typeof fetch === 'function') {\n    return resolveComponentResources(fetch)\n      .catch((error) => {\n        console.error(error);\n        return Promise.resolve();\n      })\n      .then(() => internalCreateApplication(config));\n  }\n\n  return internalCreateApplication(config);\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS,\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n  createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'BrowserModule Providers Marker' : '',\n);\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER],\n  },\n  {\n    provide: Testability, // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER],\n  },\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT],\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2,\n  SharedStylesHost,\n  EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr},\n  typeof ngDevMode === 'undefined' || ngDevMode\n    ? {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true}\n    : [],\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const providersAlreadyPresent = inject(BROWSER_MODULE_PROVIDERS_MARKER, {\n        optional: true,\n        skipSelf: true,\n      });\n\n      if (providersAlreadyPresent) {\n        throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n            `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`,\n        );\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["RuntimeError", "plugin", "i1.EventManager", "i2.SharedStylesHost", "TracingService", "getDOM", "\u0275setDocument", "DomAdapter", "setRootDomAdapter", "parseCookieValue", "global", "RuntimeError", "getDOM", "PLATFORM_BROWSER_ID", "TESTABILITY_GETTER", "TESTABILITY", "INJECTOR_SCOPE"]
}
