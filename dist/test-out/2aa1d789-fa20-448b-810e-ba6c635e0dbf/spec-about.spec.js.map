{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\routes\\about\\about.html", "angular:jit:style:src\\app\\routes\\about\\about.css", "src/app/routes/about/about.ts", "src/app/routes/about/about.spec.ts"],
  "sourcesContent": ["<p>about -- {{ aboutId() }} - {{limit()}} </p>\r\n\r\n\r\n<div class=\" flex flex-col p-10 items-center gap-10 \">\r\n    <div class=\" text-5xl p-2 \">Product List</div>\r\n    <div class=\" w-full flex flex-col items-center gap-10 justify-center \">\r\n        <ul class=\" list-disc flex flex-col items-center gap-5 w-1/2 \">\r\n            @for (product of productList; track $index) {\r\n\r\n            <li class=\" flex w-full gap-2 items-center justify-between \">\r\n                <div class=\"border rounded-xl p-2 w-full\">{{product}}</div>\r\n                <button class=\" border rounded-xl p-2 \" (click)=\"removeProduct(product)\">Remove</button>\r\n            </li>\r\n            }@empty {\r\n            <div class=\" text-xl underline \">Your product list is empty.</div>\r\n            }\r\n        </ul>\r\n\r\n        <button class=\" border rounded-xl p-2 \" (click)=\"clearProducts()\">Clear all</button>\r\n    </div>\r\n\r\n\r\n    <h3 class=\" text-5xl \">Add a New Product</h3>\r\n    <input #newProduct class=\" border rounded-xl p-2 placeholder:text-gray-400 \"\r\n        (keyup.enter)=\"addNewProduct(newProduct.value); newProduct.value = ''\" placeholder=\"New product name\">\r\n    <button class=\" border rounded-xl p-2 \" (click)=\"addNewProduct(newProduct.value); newProduct.value = ''\">Add</button>\r\n</div>\r\n\r\n\r\n<div>\r\n    <app-button label=\"shared button about\" ></app-button>\r\n</div>", "/* src/app/routes/about/about.css */\n/*# sourceMappingURL=about.css.map */\n", "import { Component, input, OnInit } from '@angular/core';\r\nimport { Dataservice } from '../../services/data';\r\nimport { Button } from '../../shared/button/button';\r\n\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  standalone: true,\r\n  imports: [Button],\r\n  templateUrl: './about.html',\r\n  styleUrl: './about.css'\r\n})\r\nexport class About implements OnInit {\r\n  aboutId = input.required<string>();\r\n  limit = input.required<string>();\r\n\r\n  productList: string[] = [];\r\n\r\n  constructor(private dataService: Dataservice) { }\r\n\r\n  private refreshProductList() {\r\n    this.productList = this.dataService.getProducts();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.productList = this.dataService.getProducts()\r\n  }\r\n\r\n  addNewProduct(productName: string) {\r\n    if (productName) {\r\n      this.dataService.addProducts(productName);\r\n      this.refreshProductList();\r\n    }\r\n  }\r\n\r\n  removeProduct(productName: string) {\r\n    if (productName) {\r\n      this.dataService.removeProduct(productName);\r\n      this.refreshProductList();\r\n    }\r\n  }\r\n\r\n  clearProducts() {\r\n    this.dataService.clearProducts();\r\n    this.refreshProductList();\r\n  }\r\n}\r\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Component } from '@angular/core';\r\nimport { About } from './about';\r\nimport { Dataservice } from '../../services/data';\r\nimport { Button } from '../../shared/button/button';\r\n\r\n// --- Mock Child Component ---\r\n// Create a fake version of the Button component to isolate the About component.\r\n@Component({ selector: 'app-button', template: '', standalone: true })\r\nclass MockButton {}\r\n// -----------------------------\r\n\r\ndescribe('About', () => {\r\n  let component: About;\r\n  let fixture: ComponentFixture<About>;\r\n  // Create a spy object for the Dataservice with all the methods we need to test\r\n  let dataServiceSpy: jasmine.SpyObj<Dataservice>;\r\n\r\n  beforeEach(async () => {\r\n    // Initialize the spy object\r\n    const spy = jasmine.createSpyObj('Dataservice', [\r\n      'getProducts', \r\n      'addProducts', \r\n      'removeProduct', \r\n      'clearProducts'\r\n    ]);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [About], // Import the standalone component under test\r\n      providers: [\r\n        // Provide our mock service instead of the real one\r\n        { provide: Dataservice, useValue: spy }\r\n      ]\r\n    })\r\n    .overrideComponent(About, {\r\n      // Replace the real Button component with our mock version\r\n      remove: { imports: [Button] },\r\n      add: { imports: [MockButton] }\r\n    })\r\n    .compileComponents();\r\n    \r\n    fixture = TestBed.createComponent(About);\r\n    component = fixture.componentInstance;\r\n    // Get the injected spy instance\r\n    dataServiceSpy = TestBed.inject(Dataservice) as jasmine.SpyObj<Dataservice>;\r\n\r\n    // Set the required signal inputs before the first change detection\r\n    fixture.componentRef.setInput('aboutId', '123');\r\n    fixture.componentRef.setInput('limit', '10');\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should get products from the service on ngOnInit', () => {\r\n    // Arrange: Tell the spy what to return when getProducts is called\r\n    const mockProducts = ['Milk', 'Bread'];\r\n    dataServiceSpy.getProducts.and.returnValue(mockProducts);\r\n\r\n    // Act: Trigger the ngOnInit lifecycle hook\r\n    fixture.detectChanges();\r\n\r\n    // Assert: Check that the productList was updated and the service was called\r\n    expect(component.productList).toEqual(mockProducts);\r\n    expect(dataServiceSpy.getProducts).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('should call addProducts and refresh the list when addNewProduct is called with a valid name', () => {\r\n    // Arrange\r\n    const newProduct = 'Cheese';\r\n    const updatedList = ['Milk', 'Bread', 'Cheese'];\r\n    // After adding, the next getProducts call should return the updated list\r\n    dataServiceSpy.getProducts.and.returnValue(updatedList);\r\n    \r\n    // Act\r\n    component.addNewProduct(newProduct);\r\n\r\n    // Assert\r\n    expect(dataServiceSpy.addProducts).toHaveBeenCalledOnceWith(newProduct);\r\n    expect(dataServiceSpy.getProducts).toHaveBeenCalledTimes(1);\r\n    expect(component.productList).toEqual(updatedList);\r\n  });\r\n\r\n  it('should NOT call addProducts if the product name is empty', () => {\r\n    // Act\r\n    component.addNewProduct('');\r\n\r\n    // Assert\r\n    expect(dataServiceSpy.addProducts).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call removeProduct and refresh the list when removeProduct is called', () => {\r\n    // Arrange\r\n    const productToRemove = 'Bread';\r\n    const updatedList = ['Milk'];\r\n    dataServiceSpy.getProducts.and.returnValue(updatedList);\r\n    \r\n    // Act\r\n    component.removeProduct(productToRemove);\r\n\r\n    // Assert\r\n    expect(dataServiceSpy.removeProduct).toHaveBeenCalledOnceWith(productToRemove);\r\n    expect(dataServiceSpy.getProducts).toHaveBeenCalledTimes(1);\r\n    expect(component.productList).toEqual(updatedList);\r\n  });\r\n\r\n  it('should call clearProducts and refresh the list when clearProducts is called', () => {\r\n    // Arrange\r\n    dataServiceSpy.getProducts.and.returnValue([]); // After clearing, getProducts returns an empty array\r\n\r\n    // Act\r\n    component.clearProducts();\r\n\r\n    // Assert\r\n    expect(dataServiceSpy.clearProducts).toHaveBeenCalledTimes(1);\r\n    expect(dataServiceSpy.getProducts).toHaveBeenCalledTimes(1);\r\n    expect(component.productList).toEqual([]);\r\n  });\r\n});"],
  "mappings": "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",
  "names": ["about_default", "init_about", "About", "init_about"]
}
