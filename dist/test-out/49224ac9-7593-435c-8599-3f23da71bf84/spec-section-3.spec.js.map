{
  "version": 3,
  "sources": ["src/app/routes/home/section-3/section-3.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { Section3 } from './section-3';\r\nimport { Router } from '@angular/router';\r\n\r\ndescribe('Section3', () => {\r\n  let component: Section3;\r\n  let fixture: ComponentFixture<Section3>;\r\n  let logSpy: jasmine.Spy;\r\n  const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Section3],\r\n      providers: [{ provide: Router, useValue: routerSpy }]\r\n    })\r\n      .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Section3);\r\n    component = fixture.componentInstance;\r\n    logSpy = spyOn(console, 'log').and.callThrough();\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should return value to upperCase when useName function is called', () => {\r\n    component['_userName'] = 'alice';\r\n    expect(component.userName).toBe('ALICE');\r\n  });\r\n\r\n  it('should generate correct message for valid users', () => {\r\n    component.userName = 'Karma';\r\n    expect(component.welcomeMessage).toBe('Welcome, KARMA!')\r\n  });\r\n\r\n  it('should generate default message for invalid users', () => {\r\n    component.userName = 'a';\r\n    expect(component.welcomeMessage).toBe('Welcome, GUEST!');\r\n  });\r\n\r\n  it('should log provided event via console.log method', () => {\r\n    const eventMessage = \"Button is clicked\";\r\n    component.console(eventMessage);\r\n    expect(logSpy).toHaveBeenCalledWith(eventMessage);\r\n  });\r\n\r\n  it('should call router.navigate with the provided path via the redirect method', () => {\r\n    const path = '/home';\r\n    component.redirect(path);\r\n    expect(routerSpy.navigate).toHaveBeenCalledWith([path]);\r\n  });\r\n}); \r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAEA;AACA;AAEA,aAAS,YAAY,MAAK;AACxB,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,YAAM,YAAY,QAAQ,aAAa,UAAU,CAAC,UAAU,CAAC;AAE7D,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,QAAQ;UAClB,WAAW,CAAC,EAAE,SAAS,QAAQ,UAAU,UAAS,CAAE;SACrD,EACE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,QAAQ;AAC1C,oBAAY,QAAQ;AACpB,iBAAS,MAAM,SAAS,KAAK,EAAE,IAAI,YAAW;AAC9C,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,oEAAoE,MAAK;AAC1E,kBAAU,WAAW,IAAI;AACzB,eAAO,UAAU,QAAQ,EAAE,KAAK,OAAO;MACzC,CAAC;AAED,SAAG,mDAAmD,MAAK;AACzD,kBAAU,WAAW;AACrB,eAAO,UAAU,cAAc,EAAE,KAAK,iBAAiB;MACzD,CAAC;AAED,SAAG,qDAAqD,MAAK;AAC3D,kBAAU,WAAW;AACrB,eAAO,UAAU,cAAc,EAAE,KAAK,iBAAiB;MACzD,CAAC;AAED,SAAG,oDAAoD,MAAK;AAC1D,cAAM,eAAe;AACrB,kBAAU,QAAQ,YAAY;AAC9B,eAAO,MAAM,EAAE,qBAAqB,YAAY;MAClD,CAAC;AAED,SAAG,8EAA8E,MAAK;AACpF,cAAM,OAAO;AACb,kBAAU,SAAS,IAAI;AACvB,eAAO,UAAU,QAAQ,EAAE,qBAAqB,CAAC,IAAI,CAAC;MACxD,CAAC;IACH,CAAC;;;",
  "names": []
}
