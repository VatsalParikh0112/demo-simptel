{
  "version": 3,
  "sources": ["../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/meta.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/title.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/util.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/tools/common_tools.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/browser/tools/tools.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/debug/by.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/dom/events/hammer_gestures.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/security/dom_sanitization_service.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/hydration.ts", "../darwin_arm64-fastbuild-ST-46c76129e412/bin/packages/platform-browser/src/version.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see {@link Meta}\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} & {\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement | null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement | null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(\n    meta: MetaDefinition,\n    forceCreation: boolean = false,\n  ): HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter((elem) => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) =>\n      el.setAttribute(this._getMetaKeyMap(prop), tag[prop]),\n    );\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n      (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key],\n    );\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string} = {\n  httpEquiv: 'http-equiv',\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference path=\"../../../goog.d.ts\" />\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = (global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {});\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(\n    public msPerTick: number,\n    public numTicks: number,\n  ) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```ts\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    if (record && 'profile' in console && typeof console.profile === 'function') {\n      console.profile(profileName);\n    }\n    const start = performance.now();\n    let numTicks = 0;\n    while (numTicks < 5 || performance.now() - start < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performance.now();\n    if (record && 'profileEnd' in console && typeof console.profileEnd === 'function') {\n      console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    console.log(`ran ${numTicks} change detection cycles`);\n    console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {exportNgVar} from '../../dom/util';\n\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null\n        ? elementMatches(debugElement.nativeElement, selector)\n        : false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return (\n      (n.matches && n.matches(selector)) ||\n      (n.msMatchesSelector && n.msMatchesSelector(selector)) ||\n      (n.webkitMatchesSelector && n.webkitMatchesSelector(selector))\n    );\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"hammerjs\" />\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  NgModule,\n  Optional,\n  ɵConsole as Console,\n} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true,\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n *\n * @deprecated The HammerJS integration is deprecated. Replace it by your own implementation.\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'HammerGestureConfig' : '',\n);\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n *\n * @deprecated The hammerjs integration is deprecated. Replace it by your own implementation.\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a HammerLoader to Angular.\n *\n * @see {@link HammerLoader}\n *\n * @publicApi\n *\n * @deprecated The HammerJS integration is deprecated. Replace it by your own implementation.\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'HammerLoader' : '',\n);\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n *\n * @deprecated The HammerJS integration is deprecated. Replace it by your own implementation.\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void> | null = null;\n\n  constructor(\n    @Inject(DOCUMENT) doc: any,\n    @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig,\n    private _injector: Injector,\n    @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader | null,\n  ) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Get a `Console` through an injector to tree-shake the\n        // class when it is unused in production.\n        const _console = this._injector.get(Console);\n        _console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`,\n        );\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(() =>\n        this._loaderPromise!.then(() => {\n          // If Hammer isn't actually loaded when the custom loader resolves, give up.\n          if (!(window as any).Hammer) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              const _console = this._injector.get(Console);\n              _console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n            }\n            deregister = () => {};\n            return;\n          }\n\n          if (!cancelRegistration) {\n            // Now that Hammer is loaded and the listener is being loaded for real,\n            // the deregistration function changes from canceling registration to\n            // removal.\n            deregister = this.addEventListener(element, eventName, handler);\n          }\n        }).catch(() => {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const _console = this._injector.get(Console);\n            _console.warn(\n              `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`,\n            );\n          }\n          deregister = () => {};\n        }),\n      );\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function (eventObj: HammerInput) {\n        zone.runGuarded(function () {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n *\n * @deprecated The hammer integration is deprecated. Replace it by your own implementation.\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]],\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n  ],\n})\nexport class HammerModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  forwardRef,\n  Inject,\n  Injectable,\n  Sanitizer,\n  SecurityContext,\n  ɵ_sanitizeHtml as _sanitizeHtml,\n  ɵ_sanitizeUrl as _sanitizeUrl,\n  ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow,\n  ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml,\n  ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl,\n  ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript,\n  ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle,\n  ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl,\n  ɵBypassType as BypassType,\n  ɵRuntimeError as RuntimeError,\n  ɵunwrapSafeValue as unwrapSafeValue,\n  ɵXSS_SECURITY_URL as XSS_SECURITY_URL,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n@Injectable({providedIn: 'root'})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            'unsafe value used in a script context',\n        );\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`,\n        );\n      default:\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`,\n        );\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpTransferCacheOptions, ɵwithHttpTransferCache} from '@angular/common/http';\nimport {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  inject,\n  makeEnvironmentProviders,\n  NgZone,\n  Provider,\n  ɵConsole as Console,\n  ɵRuntimeError as RuntimeError,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵwithDomHydration as withDomHydration,\n  ɵwithEventReplay,\n  ɵwithI18nSupport,\n  ɵZONELESS_ENABLED as ZONELESS_ENABLED,\n  ɵwithIncrementalHydration,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nexport enum HydrationFeatureKind {\n  NoHttpTransferCache,\n  HttpTransferCacheOptions,\n  I18nSupport,\n  EventReplay,\n  IncrementalHydration,\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n  ɵkind: FeatureKind,\n  ɵproviders: Provider[] = [],\n  ɵoptions: unknown = {},\n): HydrationFeature<FeatureKind> {\n  return {ɵkind, ɵproviders};\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nexport function withNoHttpTransferCache(): HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * The function accepts an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * whether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nexport function withHttpTransferCacheOptions(\n  options: HttpTransferCacheOptions,\n): HydrationFeature<HydrationFeatureKind.HttpTransferCacheOptions> {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(\n    HydrationFeatureKind.HttpTransferCacheOptions,\n    ɵwithHttpTransferCache(options),\n  );\n}\n\n/**\n * Enables support for hydrating i18n blocks.\n *\n * @publicApi 20.0\n */\nexport function withI18nSupport(): HydrationFeature<HydrationFeatureKind.I18nSupport> {\n  return hydrationFeature(HydrationFeatureKind.I18nSupport, ɵwithI18nSupport());\n}\n\n/**\n * Enables support for replaying user events (e.g. `click`s) that happened on a page\n * before hydration logic has completed. Once an application is hydrated, all captured\n * events are replayed and relevant event listeners are executed.\n *\n * @usageNotes\n *\n * Basic example of how you can enable event replay in your application when\n * `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration(withEventReplay())]\n * });\n * ```\n * @publicApi\n * @see {@link provideClientHydration}\n */\nexport function withEventReplay(): HydrationFeature<HydrationFeatureKind.EventReplay> {\n  return hydrationFeature(HydrationFeatureKind.EventReplay, ɵwithEventReplay());\n}\n\n/**\n * Enables support for incremental hydration using the `hydrate` trigger syntax.\n *\n * @usageNotes\n *\n * Basic example of how you can enable incremental hydration in your application when\n * the `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration(withIncrementalHydration())]\n * });\n * ```\n * @publicApi 20.0\n * @see {@link provideClientHydration}\n */\nexport function withIncrementalHydration(): HydrationFeature<HydrationFeatureKind.IncrementalHydration> {\n  return hydrationFeature(HydrationFeatureKind.IncrementalHydration, ɵwithIncrementalHydration());\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      useValue: () => {\n        const ngZone = inject(NgZone);\n        const isZoneless = inject(ZONELESS_ENABLED);\n        // Checking `ngZone instanceof NgZone` would be insufficient here,\n        // because custom implementations might use NgZone as a base class.\n        if (!isZoneless && ngZone.constructor !== NgZone) {\n          const console = inject(Console);\n          const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n              'that uses a custom or a noop Zone.js implementation. ' +\n              'This is not yet a fully supported configuration.',\n          );\n          console.warn(message);\n        }\n      },\n      multi: true,\n    },\n  ];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or enable new ones:\n *\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n * * {@link withI18nSupport} to enable hydration support for i18n blocks\n * * {@link withEventReplay} to enable support for replaying user events\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```ts\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n * @see {@link withI18nSupport}\n * @see {@link withEventReplay}\n *\n * @param features Optional features to configure additional hydration behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi 17.0\n */\nexport function provideClientHydration(\n  ...features: HydrationFeature<HydrationFeatureKind>[]\n): EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  const hasHttpTransferCacheOptions = featuresKind.has(\n    HydrationFeatureKind.HttpTransferCacheOptions,\n  );\n\n  if (\n    typeof ngDevMode !== 'undefined' &&\n    ngDevMode &&\n    featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) &&\n    hasHttpTransferCacheOptions\n  ) {\n    throw new RuntimeError(\n      RuntimeErrorCode.HYDRATION_CONFLICTING_FEATURES,\n      'Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.',\n    );\n  }\n\n  return makeEnvironmentProviders([\n    typeof ngDevMode !== 'undefined' && ngDevMode ? provideZoneJsCompatibilityDetector() : [],\n    withDomHydration(),\n    featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions\n      ? []\n      : ɵwithHttpTransferCache({}),\n    providers,\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('20.1.6');\n"],
  "mappings": "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",
  "names": ["getDOM", "elem", "Console", "allowSanitizationBypassOrThrow", "unwrapSafeValue", "_sanitizeHtml", "RuntimeError", "_sanitizeUrl", "XSS_SECURITY_URL", "bypassSanitizationTrustHtml", "bypassSanitizationTrustStyle", "bypassSanitizationTrustScript", "bypassSanitizationTrustUrl", "bypassSanitizationTrustResourceUrl", "HydrationFeatureKind"]
}
