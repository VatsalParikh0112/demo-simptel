{
  "version": 3,
  "sources": ["angular:test-bed-init:angular:test-bed-init", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/mock_platform_location.ts", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/navigation/provide_fake_platform_navigation.ts", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/location_mock.ts", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/mock_location_strategy.ts", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/common/testing/src/provide_location_mocks.ts", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser/testing/src/dom_test_component_renderer.ts", "../darwin_arm64-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser/testing/src/browser.ts"],
  "sourcesContent": ["import { getTestBed } from '@angular/core/testing';\nimport { BrowserTestingModule, platformBrowserTesting } from '@angular/platform-browser/testing';\ngetTestBed().initTestEnvironment(BrowserTestingModule, platformBrowserTesting(), {\n  errorOnUnknownElements: true,\n  errorOnUnknownProperties: true,\n});", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DOCUMENT,\n  LocationChangeEvent,\n  LocationChangeListener,\n  PlatformLocation,\n  ÉµPlatformNavigation as PlatformNavigation,\n} from '../../index';\nimport {Inject, inject, Injectable, InjectionToken, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\nimport {FakeNavigation} from './navigation/fake_navigation';\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\nfunction parseUrl(urlStr: string, baseHref: string) {\n  const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  let serverBase: string | undefined;\n\n  // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n  let parsedUrl: {\n    protocol: string;\n    hostname: string;\n    port: string;\n    pathname: string;\n    search: string;\n    hash: string;\n  };\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    const result = urlParse.exec(serverBase || '' + urlStr);\n    if (!result) {\n      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n    }\n    const hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8],\n    };\n  }\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n  return {\n    hostname: (!serverBase && parsedUrl.hostname) || '',\n    protocol: (!serverBase && parsedUrl.protocol) || '',\n    port: (!serverBase && parsedUrl.port) || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || '',\n  };\n}\n\n/**\n * Mock platform location config\n *\n * @publicApi\n */\nexport interface MockPlatformLocationConfig {\n  startUrl?: string;\n  appBaseHref?: string;\n}\n\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nexport const MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken<MockPlatformLocationConfig>(\n  'MOCK_PLATFORM_LOCATION_CONFIG',\n);\n\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\n@Injectable()\nexport class MockPlatformLocation implements PlatformLocation {\n  private baseHref: string = '';\n  private hashUpdate = new Subject<LocationChangeEvent>();\n  private popStateSubject = new Subject<LocationChangeEvent>();\n  private urlChangeIndex: number = 0;\n  private urlChanges: {\n    hostname: string;\n    protocol: string;\n    port: string;\n    pathname: string;\n    search: string;\n    hash: string;\n    state: unknown;\n  }[] = [{hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null}];\n\n  constructor(\n    @Inject(MOCK_PLATFORM_LOCATION_CONFIG) @Optional() config?: MockPlatformLocationConfig,\n  ) {\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n\n      const parsedChanges = this.parseChanges(\n        null,\n        config.startUrl || 'http://_empty_/',\n        this.baseHref,\n      );\n      this.urlChanges[0] = {...parsedChanges};\n    }\n  }\n\n  get hostname() {\n    return this.urlChanges[this.urlChangeIndex].hostname;\n  }\n  get protocol() {\n    return this.urlChanges[this.urlChangeIndex].protocol;\n  }\n  get port() {\n    return this.urlChanges[this.urlChangeIndex].port;\n  }\n  get pathname() {\n    return this.urlChanges[this.urlChangeIndex].pathname;\n  }\n  get search() {\n    return this.urlChanges[this.urlChangeIndex].search;\n  }\n  get hash() {\n    return this.urlChanges[this.urlChangeIndex].hash;\n  }\n  get state() {\n    return this.urlChanges[this.urlChangeIndex].state;\n  }\n\n  getBaseHrefFromDOM(): string {\n    return this.baseHref;\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    const subscription = this.popStateSubject.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n\n  onHashChange(fn: LocationChangeListener): VoidFunction {\n    const subscription = this.hashUpdate.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n\n  get href(): string {\n    let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n    url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n    return url;\n  }\n\n  get url(): string {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n\n  private parseChanges(state: unknown, url: string, baseHref: string = '') {\n    // When the `history.state` value is stored, it is always copied.\n    state = JSON.parse(JSON.stringify(state));\n    return {...parseUrl(url, baseHref), state};\n  }\n\n  replaceState(state: any, title: string, newUrl: string): void {\n    const {pathname, search, state: parsedState, hash} = this.parseChanges(state, newUrl);\n\n    this.urlChanges[this.urlChangeIndex] = {\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState,\n    };\n  }\n\n  pushState(state: any, title: string, newUrl: string): void {\n    const {pathname, search, state: parsedState, hash} = this.parseChanges(state, newUrl);\n    if (this.urlChangeIndex > 0) {\n      this.urlChanges.splice(this.urlChangeIndex + 1);\n    }\n    this.urlChanges.push({\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState,\n    });\n    this.urlChangeIndex = this.urlChanges.length - 1;\n  }\n\n  forward(): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex < this.urlChanges.length) {\n      this.urlChangeIndex++;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n\n  back(): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex > 0) {\n      this.urlChangeIndex--;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n\n  historyGo(relativePosition: number = 0): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    const nextPageIndex = this.urlChangeIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n      this.urlChangeIndex = nextPageIndex;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n\n  getState(): unknown {\n    return this.state;\n  }\n\n  /**\n   * Browsers are inconsistent in when they fire events and perform the state updates\n   * The most easiest thing to do in our mock is synchronous and that happens to match\n   * Firefox and Chrome, at least somewhat closely\n   *\n   * https://github.com/WICG/navigation-api#watching-for-navigations\n   * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n   * popstate is always sent before hashchange:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n   */\n  private emitEvents(oldHash: string, oldUrl: string) {\n    this.popStateSubject.next({\n      type: 'popstate',\n      state: this.getState(),\n      oldUrl,\n      newUrl: this.url,\n    } as LocationChangeEvent);\n    if (oldHash !== this.hash) {\n      this.hashUpdate.next({\n        type: 'hashchange',\n        state: null,\n        oldUrl,\n        newUrl: this.url,\n      } as LocationChangeEvent);\n    }\n  }\n}\n\n/**\n * Mock implementation of URL state.\n */\n@Injectable()\nexport class FakeNavigationPlatformLocation implements PlatformLocation {\n  private readonly _platformNavigation: FakeNavigation;\n\n  constructor() {\n    const platformNavigation = inject(PlatformNavigation);\n    if (!(platformNavigation instanceof FakeNavigation)) {\n      throw new Error(\n        'FakePlatformNavigation cannot be used without FakeNavigation. Use ' +\n          '`provideFakeNavigation` to have all these services provided together.',\n      );\n    }\n    this._platformNavigation = platformNavigation;\n  }\n\n  private config = inject(MOCK_PLATFORM_LOCATION_CONFIG, {optional: true});\n  getBaseHrefFromDOM(): string {\n    return this.config?.appBaseHref ?? '';\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    this._platformNavigation.window.addEventListener('popstate', fn);\n    return () => this._platformNavigation.window.removeEventListener('popstate', fn);\n  }\n\n  onHashChange(fn: LocationChangeListener): VoidFunction {\n    this._platformNavigation.window.addEventListener('hashchange', fn as any);\n    return () => this._platformNavigation.window.removeEventListener('hashchange', fn as any);\n  }\n\n  get href(): string {\n    return this._platformNavigation.currentEntry.url!;\n  }\n  get protocol(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).protocol;\n  }\n  get hostname(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).hostname;\n  }\n  get port(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).port;\n  }\n  get pathname(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).pathname;\n  }\n  get search(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).search;\n  }\n  get hash(): string {\n    return new URL(this._platformNavigation.currentEntry.url!).hash;\n  }\n\n  pushState(state: any, title: string, url: string): void {\n    this._platformNavigation.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    this._platformNavigation.replaceState(state, title, url);\n  }\n\n  forward(): void {\n    this._platformNavigation.forward();\n  }\n\n  back(): void {\n    this._platformNavigation.back();\n  }\n\n  historyGo(relativePosition: number = 0): void {\n    this._platformNavigation.go(relativePosition);\n  }\n\n  getState(): unknown {\n    return this._platformNavigation.currentEntry.getHistoryState();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DOCUMENT,\n  PlatformLocation,\n  ÉµPlatformNavigation as PlatformNavigation,\n} from '../../../index';\nimport {inject, InjectionToken, Provider} from '@angular/core';\n\nimport {\n  FakeNavigationPlatformLocation,\n  MOCK_PLATFORM_LOCATION_CONFIG,\n} from '../mock_platform_location';\n\nimport {FakeNavigation} from './fake_navigation';\n\nconst FAKE_NAVIGATION = new InjectionToken<FakeNavigation>('fakeNavigation', {\n  providedIn: 'root',\n  factory: () => {\n    const config = inject(MOCK_PLATFORM_LOCATION_CONFIG, {optional: true});\n    const baseFallback = 'http://_empty_/';\n    const startUrl = new URL(config?.startUrl || baseFallback, baseFallback);\n    const fakeNavigation = new FakeNavigation(inject(DOCUMENT), startUrl.href as `http${string}`);\n    fakeNavigation.setSynchronousTraversalsForTesting(true);\n    return fakeNavigation;\n  },\n});\n\n/**\n * Return a provider for the `FakeNavigation` in place of the real Navigation API.\n */\nexport function provideFakePlatformNavigation(): Provider[] {\n  return [\n    {\n      provide: PlatformNavigation,\n      useFactory: () => inject(FAKE_NAVIGATION),\n    },\n    {provide: PlatformLocation, useClass: FakeNavigationPlatformLocation},\n  ];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Location,\n  LocationStrategy,\n  PopStateEvent,\n  ÉµnormalizeQueryParams as normalizeQueryParams,\n} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Subject, SubscriptionLike} from 'rxjs';\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\n@Injectable()\nexport class SpyLocation implements Location {\n  urlChanges: string[] = [];\n  private _history: LocationState[] = [new LocationState('', '', null)];\n  private _historyIndex: number = 0;\n  /** @internal */\n  _subject = new Subject<PopStateEvent>();\n  /** @internal */\n  _basePath: string = '';\n  /** @internal */\n  _locationStrategy: LocationStrategy = null!;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription: SubscriptionLike | null = null;\n\n  /** @docs-private */\n  ngOnDestroy(): void {\n    this._urlChangeSubscription?.unsubscribe();\n    this._urlChangeListeners = [];\n  }\n\n  setInitialPath(url: string) {\n    this._history[this._historyIndex].path = url;\n  }\n\n  setBaseHref(url: string) {\n    this._basePath = url;\n  }\n\n  path(): string {\n    return this._history[this._historyIndex].path;\n  }\n\n  getState(): unknown {\n    return this._history[this._historyIndex].state;\n  }\n\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath = this.path().endsWith('/')\n      ? this.path().substring(0, this.path().length - 1)\n      : this.path();\n\n    return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n  }\n\n  simulateUrlPop(pathname: string) {\n    this._subject.next({'url': pathname, 'pop': true, 'type': 'popstate'});\n  }\n\n  simulateHashChange(pathname: string) {\n    const path = this.prepareExternalUrl(pathname);\n    this.pushHistory(path, '', null);\n\n    this.urlChanges.push('hash: ' + pathname);\n    // the browser will automatically fire popstate event before each `hashchange` event, so we need\n    // to simulate it.\n    this._subject.next({'url': pathname, 'pop': true, 'type': 'popstate'});\n    this._subject.next({'url': pathname, 'pop': true, 'type': 'hashchange'});\n  }\n\n  prepareExternalUrl(url: string): string {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._basePath + url;\n  }\n\n  go(path: string, query: string = '', state: any = null) {\n    path = this.prepareExternalUrl(path);\n\n    this.pushHistory(path, query, state);\n\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push(url);\n    this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n  }\n\n  replaceState(path: string, query: string = '', state: any = null) {\n    path = this.prepareExternalUrl(path);\n\n    const history = this._history[this._historyIndex];\n\n    history.state = state;\n\n    if (history.path == path && history.query == query) {\n      return;\n    }\n\n    history.path = path;\n    history.query = query;\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push('replace: ' + url);\n    this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n  }\n\n  forward() {\n    if (this._historyIndex < this._history.length - 1) {\n      this._historyIndex++;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate',\n      });\n    }\n  }\n\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate',\n      });\n    }\n  }\n\n  historyGo(relativePosition: number = 0): void {\n    const nextPageIndex = this._historyIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n      this._historyIndex = nextPageIndex;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate',\n      });\n    }\n  }\n\n  onUrlChange(fn: (url: string, state: unknown) => void): VoidFunction {\n    this._urlChangeListeners.push(fn);\n\n    this._urlChangeSubscription ??= this.subscribe((v) => {\n      this._notifyUrlChangeListeners(v.url, v.state);\n    });\n\n    return () => {\n      const fnIndex = this._urlChangeListeners.indexOf(fn);\n      this._urlChangeListeners.splice(fnIndex, 1);\n\n      if (this._urlChangeListeners.length === 0) {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeSubscription = null;\n      }\n    };\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach((fn) => fn(url, state));\n  }\n\n  subscribe(\n    onNext: (value: any) => void,\n    onThrow?: ((error: any) => void) | null,\n    onReturn?: (() => void) | null,\n  ): SubscriptionLike {\n    return this._subject.subscribe({\n      next: onNext,\n      error: onThrow ?? undefined,\n      complete: onReturn ?? undefined,\n    });\n  }\n\n  normalize(url: string): string {\n    return null!;\n  }\n\n  private pushHistory(path: string, query: string, state: any) {\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query, state));\n    this._historyIndex = this._history.length - 1;\n  }\n}\n\nclass LocationState {\n  constructor(\n    public path: string,\n    public query: string,\n    public state: any,\n  ) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\n@Injectable()\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject = new Subject<_MockPopStateEvent>();\n  private stateChanges: any[] = [];\n  constructor() {\n    super();\n  }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.next(new _MockPopStateEvent(this.path()));\n  }\n\n  override path(includeHash: boolean = false): string {\n    return this.internalPath;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  override pushState(ctx: any, title: string, path: string, query: string): void {\n    // Add state change to changes array\n    this.stateChanges.push(ctx);\n\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  override replaceState(ctx: any, title: string, path: string, query: string): void {\n    // Reset the last index of stateChanges to the ctx (state) object\n    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  override onPopState(fn: (value: any) => void): void {\n    this._subject.subscribe({next: fn});\n  }\n\n  override getBaseHref(): string {\n    return this.internalBaseHref;\n  }\n\n  override back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      this.stateChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  override forward(): void {\n    throw 'not implemented';\n  }\n\n  override getState(): unknown {\n    return this.stateChanges[(this.stateChanges.length || 1) - 1];\n  }\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location, LocationStrategy} from '../../index';\nimport {Provider} from '@angular/core';\n\nimport {SpyLocation} from './location_mock';\nimport {MockLocationStrategy} from './mock_location_strategy';\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nexport function provideLocationMocks(): Provider[] {\n  return [\n    {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n  ];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ÉµgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override insertRootElement(rootElId: string, tagName = 'div') {\n    this.removeAllRootElementsImpl();\n    const rootElement = getDOM().getDefaultDocument().createElement(tagName);\n    rootElement.setAttribute('id', rootElId);\n    this._doc.body.appendChild(rootElement);\n  }\n\n  override removeAllRootElements() {\n    // Check whether the `DOCUMENT` instance retrieved from DI contains\n    // the necessary function to complete the cleanup. In tests that don't\n    // interact with DOM, the `DOCUMENT` might be mocked and some functions\n    // might be missing. For such tests, DOM cleanup is not required and\n    // we skip the logic if there are missing functions.\n    if (typeof this._doc.querySelectorAll === 'function') {\n      this.removeAllRootElementsImpl();\n    }\n  }\n\n  private removeAllRootElementsImpl() {\n    const oldRoots = this._doc.querySelectorAll('[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {PlatformLocation} from '@angular/common';\nimport {MockPlatformLocation} from '@angular/common/testing';\nimport {\n  APP_ID,\n  createPlatformFactory,\n  NgModule,\n  StaticProvider,\n  ÉµinternalProvideZoneChangeDetection as internalProvideZoneChangeDetection,\n  ÉµChangeDetectionScheduler as ChangeDetectionScheduler,\n  ÉµChangeDetectionSchedulerImpl as ChangeDetectionSchedulerImpl,\n  PlatformRef,\n} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {BrowserModule, platformBrowser} from '../../index';\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\n\n/**\n * Platform for testing\n *\n * @publicApi\n */\nexport const platformBrowserTesting: (extraProviders?: StaticProvider[]) => PlatformRef =\n  createPlatformFactory(platformBrowser, 'browserTesting');\n\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserModule],\n  providers: [\n    {provide: APP_ID, useValue: 'a'},\n    internalProvideZoneChangeDetection({}),\n    {provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl},\n    {provide: PlatformLocation, useClass: MockPlatformLocation},\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ],\n})\nexport class BrowserTestingModule {}\n"],
  "mappings": "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",
  "names": ["FakeNavigation", "normalizeQueryParams", "getDOM", "internalProvideZoneChangeDetection", "ChangeDetectionScheduler", "ChangeDetectionSchedulerImpl"]
}
