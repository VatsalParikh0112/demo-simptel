{
  "version": 3,
  "sources": ["src/app/services/api.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\r\nimport { Api } from './api';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { users } from '../interfaces/users';\r\nimport { of } from 'rxjs';\r\n\r\ndescribe('Api', () => {\r\n  let service: Api;\r\n  let HttpClientSpy: jasmine.SpyObj<HttpClient>\r\n\r\n  beforeEach(() => {\r\n    const spy = jasmine.createSpyObj('HttpClient', ['get', 'post']);\r\n\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        Api,\r\n        { provide: HttpClient, useValue: spy }\r\n      ]\r\n    });\r\n\r\n    service = TestBed.inject(Api);\r\n    HttpClientSpy = TestBed.inject(HttpClient) as jasmine.SpyObj<HttpClient>;\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  it('should fetch the list of users when getUser is called (GET)', () => {\r\n    let mockUsers: users[] = [\r\n      {\r\n        id: 1,\r\n        name: 'Vatsal',\r\n        password: \"vatsal123\",\r\n        email: 'vatsal@mail.com',\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Poojan',\r\n        password: \"pooji123\",\r\n        email: 'pooji@mail.com',\r\n      }\r\n    ]\r\n\r\n    HttpClientSpy.get.and.returnValue(of(mockUsers));\r\n    const expectedUrl = 'https://jsonplaceholder.typicode.com/users?_limit=3';\r\n\r\n    service.getUser().subscribe(users => {\r\n      expect(users).toEqual(mockUsers);\r\n    });\r\n\r\n    expect(HttpClientSpy.get).toHaveBeenCalled();\r\n    expect(HttpClientSpy.get).toHaveBeenCalledWith(expectedUrl);\r\n  });\r\n\r\n  it('should fetch users by ID (GET)', () => {\r\n    const mockUsers: users[] = [\r\n      {\r\n        id: 1,\r\n        name: 'John',\r\n        email: 'john@test.com',\r\n        password: '1234567vv'\r\n      }\r\n    ];\r\n\r\n    const params = new HttpParams().set('id', '1');\r\n    const expectedUrl = 'https://jsonplaceholder.typicode.com/users?_limit=3';\r\n\r\n    HttpClientSpy.get.and.returnValue(of(mockUsers));\r\n\r\n    service.getUserById(1).subscribe((res) => {\r\n      expect(res).toEqual(mockUsers);\r\n    });\r\n    expect(HttpClientSpy.get).toHaveBeenCalledWith(expectedUrl, { params });\r\n\r\n  });\r\n\r\n  it('should add user (POST)', () => {\r\n    const newUser: users[] = [\r\n      {\r\n        id: 1,\r\n        name: 'John',\r\n        email: 'john@test.com',\r\n        password: '1234567vv'\r\n      }\r\n    ];\r\n\r\n    HttpClientSpy.post.and.returnValue(of(newUser));\r\n\r\n    service.addUser(newUser).subscribe((res) => {\r\n      expect(res).toEqual(newUser);\r\n    });\r\n\r\n    expect(HttpClientSpy.post).toHaveBeenCalledWith(\r\n      'https://jsonplaceholder.typicode.com/users?_limit=3',\r\n      newUser\r\n    );\r\n  });\r\n\r\n  it('should delete user (GET with params)', () => {\r\n    const mockUser: users[] = [\r\n      {\r\n        id: 1,\r\n        name: 'John',\r\n        email: 'john@test.com',\r\n        password: '1234567vv'\r\n      }\r\n    ];\r\n    const params = new HttpParams().set('id', '3');\r\n\r\n    HttpClientSpy.get.and.returnValue(of(mockUser));\r\n\r\n    service.deleteUser(3).subscribe((res) => {\r\n      expect(res).toEqual(mockUser);\r\n    });\r\n\r\n    expect(HttpClientSpy.get).toHaveBeenCalledWith(\r\n      'https://jsonplaceholder.typicode.com/users?_limit=3',\r\n      { params }\r\n    );\r\n  });\r\n\r\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA,SAAS,OAAO,MAAK;AACnB,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAK;AACd,UAAM,MAAM,QAAQ,aAAa,cAAc,CAAC,OAAO,MAAM,CAAC;AAE9D,YAAQ,uBAAuB;MAC7B,WAAW;QACT;QACA,EAAE,SAAS,YAAY,UAAU,IAAG;;KAEvC;AAED,cAAU,QAAQ,OAAO,GAAG;AAC5B,oBAAgB,QAAQ,OAAO,UAAU;EAC3C,CAAC;AAED,KAAG,qBAAqB,MAAK;AAC3B,WAAO,OAAO,EAAE,WAAU;EAC5B,CAAC;AAED,KAAG,+DAA+D,MAAK;AACrE,QAAI,YAAqB;MACvB;QACE,IAAI;QACJ,MAAM;QACN,UAAU;QACV,OAAO;;MAET;QACE,IAAI;QACJ,MAAM;QACN,UAAU;QACV,OAAO;;;AAIX,kBAAc,IAAI,IAAI,YAAY,GAAG,SAAS,CAAC;AAC/C,UAAM,cAAc;AAEpB,YAAQ,QAAO,EAAG,UAAU,WAAQ;AAClC,aAAO,KAAK,EAAE,QAAQ,SAAS;IACjC,CAAC;AAED,WAAO,cAAc,GAAG,EAAE,iBAAgB;AAC1C,WAAO,cAAc,GAAG,EAAE,qBAAqB,WAAW;EAC5D,CAAC;AAED,KAAG,kCAAkC,MAAK;AACxC,UAAM,YAAqB;MACzB;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,UAAU;;;AAId,UAAM,SAAS,IAAI,WAAU,EAAG,IAAI,MAAM,GAAG;AAC7C,UAAM,cAAc;AAEpB,kBAAc,IAAI,IAAI,YAAY,GAAG,SAAS,CAAC;AAE/C,YAAQ,YAAY,CAAC,EAAE,UAAU,CAAC,QAAO;AACvC,aAAO,GAAG,EAAE,QAAQ,SAAS;IAC/B,CAAC;AACD,WAAO,cAAc,GAAG,EAAE,qBAAqB,aAAa,EAAE,OAAM,CAAE;EAExE,CAAC;AAED,KAAG,0BAA0B,MAAK;AAChC,UAAM,UAAmB;MACvB;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,UAAU;;;AAId,kBAAc,KAAK,IAAI,YAAY,GAAG,OAAO,CAAC;AAE9C,YAAQ,QAAQ,OAAO,EAAE,UAAU,CAAC,QAAO;AACzC,aAAO,GAAG,EAAE,QAAQ,OAAO;IAC7B,CAAC;AAED,WAAO,cAAc,IAAI,EAAE,qBACzB,uDACA,OAAO;EAEX,CAAC;AAED,KAAG,wCAAwC,MAAK;AAC9C,UAAM,WAAoB;MACxB;QACE,IAAI;QACJ,MAAM;QACN,OAAO;QACP,UAAU;;;AAGd,UAAM,SAAS,IAAI,WAAU,EAAG,IAAI,MAAM,GAAG;AAE7C,kBAAc,IAAI,IAAI,YAAY,GAAG,QAAQ,CAAC;AAE9C,YAAQ,WAAW,CAAC,EAAE,UAAU,CAAC,QAAO;AACtC,aAAO,GAAG,EAAE,QAAQ,QAAQ;IAC9B,CAAC;AAED,WAAO,cAAc,GAAG,EAAE,qBACxB,uDACA,EAAE,OAAM,CAAE;EAEd,CAAC;AAEH,CAAC;",
  "names": []
}
