{
  "version": 3,
  "sources": ["src/app/shared/button/button.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Button } from './button';\r\nimport { By } from '@angular/platform-browser';\r\n\r\nfdescribe('Button Component', () => {\r\n  let component: Button;\r\n  let fixture: ComponentFixture<Button>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Button]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Button);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should have default label as empty string', () => {\r\n    expect(component.label()).toBe('');\r\n  });\r\n\r\n  it('should update label when input is changed', () => {\r\n    fixture.componentRef.setInput('label', 'Click Me');\r\n    fixture.detectChanges();\r\n\r\n    expect(component.label()).toBe('Click Me');\r\n\r\n    const buttons = fixture.debugElement.queryAll(By.css('button'));\r\n    expect(buttons[0].nativeElement.textContent).toContain('Click Me');\r\n    expect(buttons[1].nativeElement.textContent).toContain('Click Me');\r\n  });\r\n\r\n  it('should emit message when notifyParent() is called directly', () => {\r\n    spyOn(component.sendMessage, 'emit');\r\n    component.notifyParent();\r\n    expect(component.sendMessage.emit).toHaveBeenCalledWith('message from child');\r\n  });\r\n\r\n  it('should emit message when second button (with click handler) is clicked', () => {\r\n    spyOn(component.sendMessage, 'emit');\r\n\r\n    const buttons = fixture.debugElement.queryAll(By.css('button'));\r\n    buttons[1].nativeElement.click(); // click the second button\r\n\r\n    expect(component.sendMessage.emit).toHaveBeenCalledWith('message from child');\r\n  });\r\n\r\n  it('should not emit before notifyParent() is called', () => {\r\n    spyOn(component.sendMessage, 'emit');\r\n    expect(component.sendMessage.emit).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should emit multiple times if notifyParent() is called multiple times', () => {\r\n    spyOn(component.sendMessage, 'emit');\r\n\r\n    component.notifyParent();\r\n    component.notifyParent();\r\n\r\n    expect(component.sendMessage.emit).toHaveBeenCalledTimes(2);\r\n  });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AAEA,cAAU,oBAAoB,MAAK;AACjC,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,MAAM;SACjB,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,MAAM;AACxC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,+BAA+B,MAAK;AACrC,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,6CAA6C,MAAK;AACnD,eAAO,UAAU,MAAK,CAAE,EAAE,KAAK,EAAE;MACnC,CAAC;AAED,SAAG,6CAA6C,MAAK;AACnD,gBAAQ,aAAa,SAAS,SAAS,UAAU;AACjD,gBAAQ,cAAa;AAErB,eAAO,UAAU,MAAK,CAAE,EAAE,KAAK,UAAU;AAEzC,cAAM,UAAU,QAAQ,aAAa,SAAS,GAAG,IAAI,QAAQ,CAAC;AAC9D,eAAO,QAAQ,CAAC,EAAE,cAAc,WAAW,EAAE,UAAU,UAAU;AACjE,eAAO,QAAQ,CAAC,EAAE,cAAc,WAAW,EAAE,UAAU,UAAU;MACnE,CAAC;AAED,SAAG,8DAA8D,MAAK;AACpE,cAAM,UAAU,aAAa,MAAM;AACnC,kBAAU,aAAY;AACtB,eAAO,UAAU,YAAY,IAAI,EAAE,qBAAqB,oBAAoB;MAC9E,CAAC;AAED,SAAG,0EAA0E,MAAK;AAChF,cAAM,UAAU,aAAa,MAAM;AAEnC,cAAM,UAAU,QAAQ,aAAa,SAAS,GAAG,IAAI,QAAQ,CAAC;AAC9D,gBAAQ,CAAC,EAAE,cAAc,MAAK;AAE9B,eAAO,UAAU,YAAY,IAAI,EAAE,qBAAqB,oBAAoB;MAC9E,CAAC;AAED,SAAG,mDAAmD,MAAK;AACzD,cAAM,UAAU,aAAa,MAAM;AACnC,eAAO,UAAU,YAAY,IAAI,EAAE,IAAI,iBAAgB;MACzD,CAAC;AAED,SAAG,yEAAyE,MAAK;AAC/E,cAAM,UAAU,aAAa,MAAM;AAEnC,kBAAU,aAAY;AACtB,kBAAU,aAAY;AAEtB,eAAO,UAAU,YAAY,IAAI,EAAE,sBAAsB,CAAC;MAC5D,CAAC;IACH,CAAC;;;",
  "names": []
}
