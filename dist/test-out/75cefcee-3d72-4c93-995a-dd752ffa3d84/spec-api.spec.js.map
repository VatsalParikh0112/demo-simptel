{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\routes\\api\\api.html", "angular:jit:style:src\\app\\routes\\api\\api.css", "src/app/routes/api/api.ts", "src/app/routes/api/api.spec.ts"],
  "sourcesContent": ["<h2>User Management</h2>\r\n\r\n<!-- Add User Form -->\r\n<form class=\" flex flex-col gap-5 p-10 w-1/3 \" [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\">\r\n    <input class=\" border p-2  \" formControlName=\"name\" placeholder=\"Name\" />\r\n    <input class=\" border p-2  \" formControlName=\"email\" placeholder=\"Email\" type=\"email\" />\r\n    <input class=\" border p-2  \" formControlName=\"password\" placeholder=\"Password\" type=\"password\" />\r\n    <button class=\" border \" type=\"submit\" [disabled]=\"userForm.invalid\">Add User</button>\r\n</form>\r\n\r\n\r\n<div class=\" flex justify-center items-center \">\r\n    <hr class=\" w-10/12 \" />\r\n</div>\r\n\r\n<button class=\" border \" (click)=\"loadUsers()\">Fetch Users</button>\r\n\r\n<ul>\r\n    @for (u of user; track u.id) {\r\n    <li>\r\n        <strong>ID:</strong> {{ u.id }} |\r\n        <strong>Name:</strong> {{ u.name }} |\r\n        <strong>Email:</strong> {{ u.email }} |\r\n        <strong>Password:</strong> {{ u.password }}\r\n        <button (click)=\"removeUser(u.id)\">Delete</button>\r\n    </li>\r\n    }\r\n</ul>", "/* src/app/routes/api/api.css */\n/*# sourceMappingURL=api.css.map */\n", "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Api } from '../../services/api';\r\nimport { SlimUser } from '../../interfaces/users';\r\n\r\n\r\n@Component({\r\n  selector: 'app-api',\r\n  imports: [ReactiveFormsModule],\r\n  templateUrl: './api.html',\r\n  styleUrls: ['./api.css']\r\n})\r\nexport class API implements OnInit {\r\n  user: SlimUser[] = [];\r\n  userForm!: FormGroup;\r\n\r\n  constructor(private api: Api, private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n    this.loadUsers();\r\n  }\r\n\r\n  loadUsers() {\r\n    this.api.getUser().subscribe((data: any) => {\r\n      this.user = data.map((u: { id: any; name: any; email: any; password: any; }) => ({\r\n        id: u.id,\r\n        name: u.name,\r\n        email: u.email,\r\n        password: u.password\r\n      }));\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.userForm.valid) {\r\n      const newId =\r\n        this.user.length > 0\r\n          ? Math.max(...this.user.map((u) => u.id)) + 1 : 1;\r\n\r\n      const newUser: any = {\r\n        id: newId,\r\n        ...(this.userForm.value as Omit<SlimUser, 'id'>)  // ðŸ‘ˆ CAST here\r\n      };\r\n\r\n      this.api.addUser(newUser).subscribe(() => {\r\n        console.log('User added:', newUser);\r\n        this.user.push(newUser);  // ðŸ‘Œ No more error\r\n        this.userForm.reset();\r\n      });\r\n    }\r\n  }\r\n\r\n  removeUser(id: number) {\r\n    this.api.deleteUser(id).subscribe(() => {\r\n      console.log(`User with id=${id} deleted`);\r\n      this.user = this.user.filter((u: { id: number; }) => u.id !== id);\r\n    });\r\n  }\r\n\r\n\r\n}\r\n", "import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { API } from './api';\r\nimport { Api } from '../../services/api';\r\nimport { SlimUser } from '../../interfaces/users';\r\n\r\ndescribe('API', () => {\r\n    let component: API;\r\n    let fixture: ComponentFixture<API>;\r\n    let mockAPI: jasmine.SpyObj<Api>;\r\n\r\n    const mockUsers: SlimUser[] = [\r\n        { id: 1, name: 'jhon', email: 'jhon@test.com', password: 'jhon123' },\r\n        { id: 2, name: 'jane', email: 'jane@test.com', password: 'jane234' }\r\n    ];\r\n\r\n    beforeEach(async () => {\r\n        mockAPI = jasmine.createSpyObj('Api', ['getUser', 'addUser', 'deleteUser']);\r\n\r\n        mockAPI.getUser.and.returnValue(of([]));\r\n        mockAPI.addUser.and.returnValue(of(void 0));\r\n        mockAPI.deleteUser.and.returnValue(of(void 0));\r\n\r\n        await TestBed.configureTestingModule({\r\n            imports: [ReactiveFormsModule, API],\r\n            providers: [{ provide: Api, useValue: mockAPI }]   // âœ… fixed here\r\n        }).compileComponents();\r\n\r\n        fixture = TestBed.createComponent(API);\r\n        component = fixture.componentInstance;\r\n    });\r\n\r\n    it('should create component', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n\r\n    it('Should initialize form on ngOnInit', () => {\r\n        mockAPI.getUser.and.returnValue(of(mockUsers));\r\n        component.ngOnInit();\r\n        fixture.detectChanges();\r\n        expect(component.userForm).toBeDefined();\r\n        expect(component.userForm.get('name')).toBeTruthy();\r\n        expect(component.userForm.get('email')).toBeTruthy();\r\n        expect(component.userForm.get('password')).toBeTruthy();\r\n    });\r\n\r\n    it('should load users from Api', () => {\r\n        mockAPI.getUser.and.returnValue(of(mockUsers));\r\n        component.loadUsers();\r\n        expect(component.user.length).toBe(2);\r\n        expect(component.user[0].name).toBe('jhon');\r\n    });\r\n\r\n    it('form should be invalid when empty', () => {\r\n        component.ngOnInit();\r\n        expect(component.userForm.valid).toBeFalsy();\r\n    });\r\n\r\n    it('form should be valid with proper input', () => {\r\n        component.ngOnInit();\r\n        component.userForm.setValue({\r\n            name: 'Alice',\r\n            email: 'alice@test.com',\r\n            password: 'pass123'\r\n        });\r\n        expect(component.userForm.valid).toBeTrue();\r\n    });\r\n\r\n    it('should add user when form is valid', () => {\r\n        mockAPI.getUser.and.returnValue(of(mockUsers));\r\n\r\n        component.ngOnInit();\r\n        component.userForm.setValue({\r\n            name: 'New User',\r\n            email: 'new@email.com',\r\n            password: 'newpass'\r\n        });\r\n\r\n        const expectedUser = jasmine.objectContaining({\r\n            name: 'New User',\r\n            email: 'new@email.com',\r\n            password: 'newpass'\r\n        });\r\n\r\n        mockAPI.addUser.and.returnValue(of({\r\n            id: 3,\r\n            name: 'New User',\r\n            email: 'new@email.com',\r\n            password: 'newpass'\r\n        }));\r\n\r\n        component.onSubmit();\r\n\r\n        expect(mockAPI.addUser).toHaveBeenCalledWith(expectedUser);\r\n        expect(component.user.length).toBe(3);\r\n        expect(component.user.find(u => u.name === 'New User')).toBeTruthy();\r\n    });\r\n\r\n    it('should assign id = 1 when user list is empty', () => {\r\n        mockAPI.getUser.and.returnValue(of([]));   // empty user list\r\n        mockAPI.addUser.and.returnValue(of({\r\n            id: 1,\r\n            name: 'First User',\r\n            email: 'first@email.com',\r\n            password: 'pass123'\r\n        }));\r\n\r\n        component.ngOnInit();\r\n\r\n        component.userForm.setValue({\r\n            name: 'First User',\r\n            email: 'first@email.com',\r\n            password: 'pass123'\r\n        });\r\n\r\n        component.onSubmit();\r\n\r\n        expect(component.user.length).toBe(1);\r\n        expect(component.user[0].id).toBe(1);  // âœ… triggers the \":1\" branch\r\n    });\r\n\r\n    it('should delete user', fakeAsync(() => {\r\n        mockAPI.getUser.and.returnValue(of(mockUsers));\r\n        mockAPI.deleteUser.and.returnValue(of(void 0));\r\n\r\n        component.ngOnInit();\r\n        tick();  // flush getUser subscription\r\n\r\n        component.removeUser(1);\r\n        tick();  // flush deleteUser subscription\r\n\r\n        expect(mockAPI.deleteUser).toHaveBeenCalledWith(1);\r\n        expect(component.user.find(u => u.id === 1)).toBeUndefined();  // branch now covered\r\n    }));\r\n\r\n\r\n});"],
  "mappings": "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",
  "names": ["init_api", "api_default", "init_api", "cov_1fxtiklrag", "actualCoverage", "API", "s", "api", "fb", "user", "userForm", "constructor", "f", "ngOnInit", "group", "name", "Validators", "required", "email", "password", "loadUsers", "getUser", "subscribe", "data", "map", "u", "id", "onSubmit", "valid", "b", "newId", "length", "Math", "max", "newUser", "value", "addUser", "console", "log", "push", "reset", "removeUser", "deleteUser", "filter", "__decorate", "Component", "selector", "imports", "ReactiveFormsModule", "template", "__NG_CLI_RESOURCE__0", "init_api"]
}
